#  (C) 1993 by Argonne National Laboratory and Mississipi State University.
#      All rights reserved.  See COPYRIGHT in top-level directory.
#

##### User configurable options #####

top_srcdir           = @top_srcdir@

CC                   = @CC@
CC_SHL               = @CC_SHL@
CLINKER              = @CLINKER@
MPI_CC               = @MPI_CC@
MPI_CLINKER          = $(MPI_CC)
AR                   = @AR@
ARFLAGS              = cr
RANLIB               = @RANLIB@
MAKE                 = @MAKE@
MPI_CFLAGS           = @MPI_CFLAGS@
MPI_LIBS             = @MPI_LIBS@
INCLUDE_DIR          = -I.. -I${top_srcdir}/include \
                       -I${includebuild_dir} \
                       -I../../.. -I${top_srcdir}/../../include
PROF_LIBNAME         = @PROF_LIBNAME@
CFLAGS               = @CFLAGS@
MPE_LIBDIR           = @libbuild_dir@
LIB_PATH             = $(MPI_LIBS)
PROF_LIBS            = -L$(MPE_LIBDIR) @PROF_LIBS@ $(MPI_LIBS)
LDFLAGS              = @LDFLAGS@
MPE_BUILD_FORTRAN2C  = @MPE_BUILD_FORTRAN2C@
CC_DOES_C_O          = @CC_DOES_C_O@

### End User configurable options ###

SHELL            = @SHELL@
RM               = @RM@
MV               = @MV@
CP               = @CPRP@

@VPATH@

# Installation directories
prefix           = @prefix@
exec_prefix      = @exec_prefix@
bindir           = @bindir@
includedir       = @includedir@
libdir           = @libdir@
# Build directories
includebuild_dir = @includebuild_dir@
libbuild_dir     = @libbuild_dir@
binbuild_dir     = @binbuild_dir@
srcdir           = @srcdir@

EXECS            = ${binbuild_dir}/check_callstack@EXEEXT@

CC_FLAGS         = $(INCLUDE_DIR) $(CFLAGS) $(MPE_COPTS)
CC_LDFLAGS       = $(LDFLAGS) $(CFLAGS) $(MPE_LDOPTS)
# MPE include path, x_INCS, goes in front of MPI include path, MPI_xFLAGS,
# in case MPI include path is in MPI_xFLAGS containing old MPE include path.
MPICC_FLAGS      = $(INCLUDE_DIR) $(MPI_CFLAGS) $(MPE_COPTS)
MPICC_LDFLAGS    = $(LDFLAGS) $(MPI_CFLAGS) $(MPE_LDOPTS)

MPE_CSOURCES     = iterator.c fancyprint.c
MPE_P_COBJECTS   = $(MPE_CSOURCES:.c=.p@OBJEXT@)
MPE_N_COBJECTS   = $(MPE_CSOURCES:.c=.n@OBJEXT@)

.SUFFIXES: .c .@OBJEXT@ .p@OBJEXT@ .n@OBJEXT@ .a @EXEEXT@

.c.p@OBJEXT@:
	@if [ "$(CC_DOES_C_O)" = "yes" ]; then \
	     cmd="$(MPI_CC) $(MPICC_FLAGS) -o $@ -c $<" ; \
	 else \
	     cmd="$(MPI_CC) $(MPICC_FLAGS) -c $< ; $(MV) $*.@OBJEXT@ $*.p@OBJEXT@" ; \
	 fi ; \
	 echo "$${cmd}" ; $${cmd}

.c.n@OBJEXT@:
	@if [ "$(CC_DOES_C_O)" = "yes" ]; then \
	     cmd="$(CC) $(CC_FLAGS) -o $@ -c $<" ; \
	 else \
	     cmd="$(CC) $(CC_FLAGS) -c $< ; $(MV) $*.@OBJEXT@ $*.n@OBJEXT@" ; \
	 fi ; \
	 echo "$${cmd}" ; $${cmd}

# default_all is the same as default, but without the RANLIB.  This
# can speed up the build (ranlibs can take a LONG time).  profile_all
# is the same, but for the profile library
# **** Currently the same as default for simplicity ****
default_all: default
profile_all:

#
default: $(MPE_P_COBJECTS) $(MPE_N_COBJECTS)
	$(MAKE) $(MAKEOPTS) ${libbuild_dir}/lib$(PROF_LIBNAME)_nompi.a
	$(MAKE) $(MAKEOPTS) ${libbuild_dir}/lib$(PROF_LIBNAME).a
	$(MAKE) $(MAKEOPTS) $(EXECS)

#
# It is tempting here to use ... libmpe.a($(MPE_OBJECTS)) as the dependency,
# but this would require that all makes properly handle library dependencies.
# Since makes that DO are the exception rather than the rule, we don't
# use this form
#
# We've also had trouble with this.  Sometimes, under Solaris, the
# first file in the dependency is built but not included with $?
# This is clearly a bug in the make, since the determination of dependencies
# is done once (e.g., a blip in the filesystem time can't be
# responsible if make works as Sun documents it).  To fix this, we
# add all the objects to the library, not just the "recent" ones.
${libbuild_dir}/lib$(PROF_LIBNAME).a: $(MPE_P_COBJECTS)
	$(AR) $(ARFLAGS) $@ $(MPE_P_COBJECTS)
	$(RANLIB) $@

${libbuild_dir}/lib$(PROF_LIBNAME)_nompi.a: $(MPE_N_COBJECTS)
	$(AR) $(ARFLAGS) $@ $(MPE_N_COBJECTS)
	$(RANLIB) $@

# Link with *.o instead of *.no
# as NEC SX-8's cross-compiler refuses to link with *.no
${binbuild_dir}/check_callstack@EXEEXT@: check_callstack.n@OBJEXT@
	$(CP) -f check_callstack.n@OBJEXT@ mpe2tmp.@OBJEXT@
	$(CLINKER) $(CC_LDFLAGS) -o $@ mpe2tmp.@OBJEXT@ \
	                         -L${libbuild_dir} -l$(PROF_LIBNAME)_nompi
	@-$(RM) -f mpe2tmp.@OBJEXT@

#
# Remove the old libraries before rebuilding (in case they came from another
# architecture or are otherwise damaged)
rmlib:
	@-$(RM) -f ${libbuild_dir}/lib$(PROF_LIBNAME).a
	@-$(RM) -f ${libbuild_dir}/lib$(PROF_LIBNAME)_nompi.a

rmprog:
	@-$(RM) -f $(EXECS)

clean: rmprog
	@-$(RM) -f ${srcdir}/*.*@OBJEXT@ *.*@OBJEXT@ *~ PI*

distclean: clean rmlib
	@-$(RM) -f Makefile
